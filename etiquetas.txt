def color(data_dir='data/'):
    datagen = ImageDataGenerator(
        rescale=1.0 / 255,
        validation_split=0.2
    )
    train_data = datagen.flow_from_directory(
        data_dir,
        target_size=(128,128),
        batch_size=32,
        class_mode= 'categorical',
        subset='training'
    )
    val_data = datagen.flow_from_directory(
       data_dir,
        target_size=(128,128),
        batch_size=32,
        class_mode= 'categorical',
        subset='validation' 
    )
    model = Sequential([
        Conv2D(32,(3,3), activation='relu', input_sahepe=(128, 128, 3)),
        MaxPooling2D((2,2)),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D((2,2)),
        Flatten(),
        Dense(128, activation='relu'),
        Dense(train_data.num_classes, activation='softmax')
    ])
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(train_data, validation_data=val_data, epochs=15)
    model.save('clasificacionColor.h5')
    
    return train_data.class_indices


    #procesar la imagen par la red neuronal convuncional cnn
resized = cv2.resize(frame, (128,128))
normalized = resized / 255.0
input_data = np.expand_dims(normalized, axis=0) 